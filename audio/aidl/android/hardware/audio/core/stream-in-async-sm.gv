// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// To render: dot -Tpng stream-in-async-sm.gv -o stream-in-async-sm.png
digraph stream_in_async_state_machine {
    node [shape=point style=filled fillcolor=black width=0.5] I;
    node [shape=doublecircle width=0.5] F;
    node [shape=oval width=1];
    node [fillcolor=lightgreen] STANDBY;  // buffer is empty
    node [fillcolor=tomato] CLOSED;
    node [fillcolor=tomato] ERROR;
    node [style=dashed] ANY_STATE;
    node [fillcolor=lightblue style=filled];
    // Note that when the producer (h/w) is passive, "burst" operations
    // complete synchronously, bypassing the TRANSFERRING state.
    I -> STANDBY;
    STANDBY -> IDLE [label="start"];           // producer -> active
    IDLE -> STANDBY [label="standby"];         // producer -> passive, buffer is cleared
    IDLE -> TRANSFERRING [label="burst"];      // consumer -> active
    ACTIVE -> PAUSED [label="pause"];          // consumer -> passive
    ACTIVE -> DRAINING [label="drain"];        // producer -> passive
    ACTIVE -> TRANSFERRING [label="burst"];
    TRANSFERRING -> ACTIVE [label="←IStreamCallback.onTransferReady"];
    TRANSFERRING -> PAUSED [label="pause"];    // consumer -> passive
    TRANSFERRING -> DRAINING [label="drain"];  // producer -> passive
    PAUSED -> TRANSFERRING [label="burst"];    // consumer -> active
    PAUSED -> STANDBY [label="flush"];         // producer -> passive, buffer is cleared
    DRAINING -> DRAINING [label="burst"];
    DRAINING -> ACTIVE [label="start"];      // producer -> active
    DRAINING -> STANDBY [label="<empty buffer>"];  // consumer deactivates
    IDLE -> ERROR [label="←IStreamCallback.onError"];
    PAUSED -> ERROR [label="←IStreamCallback.onError"];
    TRANSFERRING -> ERROR [label="←IStreamCallback.onError"];
    ANY_STATE -> CLOSED [label="→IStream*.close"];
    CLOSED -> F;
}
