; CDDL for the Secret Management API.

; The input parameter to the `processSecretManagementRequest` operation in
; `ISecretkeeper.aidl` is always an encrypted request message, CBOR-encoded as a
; COSE_Encrypt0 object.  The encryption uses the first of the keys agreed using
; the associated AuthGraph instance, referred to as `KeySourceToSink`. Additionally,
; an external aad is used - RequestSeqNum.
ProtectedRequestPacket = CryptoPayload<RequestPacket, KeySourceToSink, RequestSeqNum>

CryptoPayload<Payload, Key, SeqNum> = [ ; COSE_Encrypt0 (untagged), [RFC 9052 s5.2]
    protected: bstr .cbor {
        1 : 3,                  ; Algorithm: AES-GCM mode w/ 256-bit key, 128-bit tag
        4 : bstr                ; key identifier set to session ID produced
                                ; by AuthGraph key exchange.
    },
    unprotected: {
        5 : bstr .size 12       ; IV
    },
    ciphertext : bstr           ; AES-GCM-256(Key, bstr .cbor Payload)
                                ; AAD for the encryption is CBOR-serialized
                                ; Enc_structure (RFC 9052 s5.3) with SeqNum as the external_aad.
]

; Once decrypted, the request packet is an encoded CBOR array holding:
; - An initial integer indicating which request is present.
; - Subsequent objects holding the parameters for that specific request.
RequestPacket =
    [GetVersionOpcode, GetVersionParams] /
    [StoreSecretOpcode, StoreSecretParams] /
    [GetSecretOpcode, GetSecretParams]

GetVersionOpcode = 1            ; Get version of the SecretManagement API
StoreSecretOpcode = 2           ; Store a secret
GetSecretOpcode = 3             ; Get the secret

; Retrieve Secretkeeper version.
GetVersionParams = ()

; Store a secret identified by the given ID, with access to the secret policed
; by the associated sealing policy.
StoreSecretParams = (
    id : SecretId,
    secret : Secret,
    sealing_policy : bstr .cbor DicePolicy,
)

; INCLUDE DicePolicy.cddl for: DicePolicy

; Retrieve a secret identified by the given ID, policed according to the sealing
; policy that was associated with the secret.  If successful, optionally also
; update the sealing policy for the secret.
GetSecretParams = (
    id : SecretId,
    ; Retrieving the value of a secret may optionally also update the sealing
    ; policy associated with a secret.
    updated_sealing_policy : bstr .cbor DicePolicy / nil,
)

SecretId = bstr .size 64        ; Unique identifier of the secret.
Secret = bstr .size 32          ; The secret value.

; A monotonically incrementing number is associated with each RequestPacket to prevent replay
; of messages within a session. This starts with 0 and is incremented (by 1) for each request
; in a session. Secretkeeper implementation must maintain an expected RequestSeqNum for each
; session (increasing it by 1 for each SecretManagement request received). This will be used in
; in decryption (external_aad).
RequestSeqNum = bstr .cbor uint     ; Encoded in accordance with Core Deterministic Encoding
                                    ; Requirements [RFC 8949 s4.2.1]

; The return value from a successful `processSecretManagementRequest` operation is a
; response message encrypted with the second of the keys agreed using the associated
; AuthGraph instance, referred to as `KeySinkToSource`.
ProtectedResponsePacket = CryptoPayload<ResponsePacket, KeySinkToSource, ResponseSeqNum>

; Once decrypted, the inner response message is encoded as a CBOR array holding:
; - An initial integer return code value.
; - Subsequently:
;    - If the return code is zero: result value(s).
;    - If the return code is non-zero: an error message.
ResponsePacket =
    [0, Result] /
    [error_code: ErrorCode, error_message: tstr]

; An error code in the inner response message indicates a failure in
; secret management processing.
ErrorCode = &(
    ; Use this as if no other error code can be used.
    ErrorCode_UnexpectedServerError: 1,
    ; Indicate the Request was malformed & hence couldnt be served.
    ErrorCode_RequestMalformed: 2,
    ; Requested Entry not found.
    ErrorCode_EntryNotFound: 3,
    ; Error happened while serialization or deserialization.
    ErrorCode_SerializationError: 4,
    ; Indicates that Dice Policy matching did not succeed & hence access not granted.
    ErrorCode_DicePolicyError: 5,
)

; The particular result variant present is determined by which request
; message was originally sent.
Result = &(
    GetVersionResult,
    StoreSecretResult,
    GetSecretResult,
)

GetVersionResult = (1)

StoreSecretResult = ()

GetSecretResult = (secret : Secret)

; Analogous to RequestSeqNum, Secretkeeper must maintain ResponseSeqNum for each session.
; This will be input to the encryption (ProtectedResponsePacket) as external_aad.
ResponseSeqNum = bstr .cbor uint    ; Encoded in accordance with Core Deterministic Encoding
                                    ; Requirements [RFC 8949 s4.2.1]
